<!DOCTYPE html>
<html>

<head>
  <title>3D CV System</title>


  <!-- Viewport mobile tag for sensible mobile support -->
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">

  <!-- Bootstrap CSS -->
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css"
    integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">
  <link rel="stylesheet" href="sweetalert2.min.css">
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css">


  <% /* If you want to discourage search engines from indexing this site, uncomment the following line: */%>
    <% /* <meta name="robots" content="noindex"> */%>

      <style>
        @import url('https://fonts.googleapis.com/css2?family=Sansita+Swashed:wght@600&display=swap');
        @import url('https://fonts.googleapis.com/css2?family=Noto+Sans+JP:wght@500&display=swap');
        @import url('https://fonts.googleapis.com/css2?family=Anton&family=Noto+Sans+JP:wght@500&display=swap');


        * {
          padding: 0;
          margin: 0;
          text-decoration: none;
          list-style: none;
          box-sizing: border-box;
        }

        body {
          font-family: 'Sansita Swashed', cursive;
          /* font-family: 'Noto Sans JP', sans-serif; */
          /* font-family: 'Anton', sans-serif; */
          background-image: url("https://www.netpremacy.com/wp-content/uploads/2018/09/Background-website-01.jpg");
          background-size: width=100% height=auto;
        }

        nav {
          background: rgb(48, 44, 44);
          height: 80px;
          width: 100%;
        }

        .logo {
          color: white;
          font-size: 50px;
          line-height: 80px;
          padding: 0px 80px;
          font-weight: bold;
        }

        nav ul {
          float: right;
          margin-right: 30px;
        }

        nav ul li {
          display: inline-block;
          line-height: 80px;
          margin: 0 5px;
        }

        nav ul li a {
          color: white;
          font-size: 25px;
          padding: 7px 15px;
          border-radius: 3px;
        }

        .nav-button {
          background: linear-gradient(90deg, #0162c8, #55e7fc);
          border-radius: 40px;
        }

        a:hover {
          text-decoration: none;
        }

        .intro {
          text-align: center;
          font-size: 50px;
          padding: 20px;
        }

        .center {
          display: block;
          margin-left: auto;
          margin-right: auto;
          width: 30%;
        }

        .absolutecenter {
          position: absolute;
          left: 50%;
        }

        .testcenter {
          position: absolute;
          left: 50%;
          transform: translate(-50%);
        }

        #create-button {
          display: block;
          margin-left: 30%;
          margin-right: 30%;
          width: 40%;
        }

        .disable:hover {
          color: white;
        }

        .menubar {
          width: 80%;
          height: 450px;
          position: relative;
          margin: 30px auto;
        }

        .btnbar {
          display: flex;
          border-bottom: 1px solid #ccc;
        }

        .btnbar button {
          background: white;
          border: none;
          outline: none;
          cursor: pointer;
          padding: 14px 16px;
          margin-right: 50px;
          font-size: 30px;
          font-weight: bold;
        }

        .btnbar .fa {
          margin-right: 15px;
        }

        .btnbar button:hover {
          color: violet;
        }

        .tab .fa {
          margin-right: 10px;
        }

        .tab {
          display: flex;
          margin: 2% auto;
        }
      </style>


      <!--
        Stylesheets and Preprocessors
        ==============================

        You can always bring in CSS files manually with `<link>` tags, or asynchronously
        using a solution like AMD (RequireJS).  Or, if you like, you can take advantage
        of Sails' conventional asset pipeline (boilerplate Gruntfile).

        By default, stylesheets from your `assets/styles` folder are included
        here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
        are supported. In production, your styles will be minified and concatenated into
        a single file.

        To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Change the order of your CSS files
            + Import stylesheets from other directories
            + Use a different or additional preprocessor, like SASS, SCSS or Stylus
    -->

      <!--STYLES-->
      <link rel="stylesheet" href="/styles/importer.css">
      <!--STYLES END-->
</head>

<body>
  <%- body %>



    <!--
        Client-side Templates
        ========================

        HTML templates are important prerequisites of modern, rich client applications.
        To work their magic, frameworks like React, Vue.js, Angular, Ember, and Backbone
        require that you load these templates client-side.

        By default, your Gruntfile is configured to automatically load and precompile
        client-side JST templates in your `assets/templates` folder, then
        include them here automatically (between TEMPLATES and TEMPLATES END).

        To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Import templates from other directories
            + Use a different view engine (handlebars, dust, pug/jade, etc.)
            + Internationalize your client-side templates using a server-side
              stringfile before they're served.
    -->

    <!--TEMPLATES-->
    <!--TEMPLATES END-->


    <!--
        Server-side View Locals
        ========================

        Sometimes, it's convenient to get access to your server-side view locals from
        client-side JavaScript.  This can improve page load times, remove the need for
        extra AJAX requests, and make your client-side code easier to understand and
        to maintain.  Sails provides a simple mechanism for accessing dynamic view
        locals: the "exposeLocalsToBrowser()" view partial.

        For more information on using this built-in feature, see:
        https://sailsjs.com/docs/concepts/views/locals#?escaping-untrusted-data-using-exposelocalstobrowser

    -->


    <!--

      Client-side Javascript
      ========================

      You can always bring in JS files manually with `script` tags, or asynchronously
      on the client using a solution like AMD (RequireJS).  Or, if you like, you can
      take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

      By default, files in your `assets/js` folder are included here
      automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
      CoffeeScript (.coffee) are supported. In production, your scripts will be minified
      and concatenated into a single file.

      To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
      For example, here are a few things you could do:

          + Change the order of your scripts
          + Import scripts from other directories
          + Use a different preprocessor, like TypeScript

    -->

    <!--SCRIPTS-->
    <script src="/dependencies/sails.io.js"></script>
    <!--SCRIPTS END-->
</body>

</html>